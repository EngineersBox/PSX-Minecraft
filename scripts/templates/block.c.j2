#include "block_{{ name_snake_lower }}.h"

#include "../../util/interface99_extensions.h"
#include "block_id.h"
#include "../items/item_block_{{ name_snake_lower }}.h"

{% if stateful %}
DEFN_BLOCK_CONSTRUCTOR_IMPL_STATEFUL({{ name_lower }}) {
    TODO("Constructor for {{ name_lower }} block");
}
{% else %}
DEFN_BLOCK_CONSTRUCTOR_IMPL_STATELESS({{ name_lower }}, {{ name_snake_upper }})
{% endif %}

void {{ name_lower }}BlockInit(VSelf) ALIAS("{{ name_capital }}Block_init");
void {{ name_capital }}Block_init(VSelf) {
    VSELF({{ name_capital }}Block);
    self->block = declareBlock(
        BLOCKID_{{ name_snake_upper }},
        0,
        {{ type }},
        {{ orientation }},
{% if face_attributes != None %}
        declareFaceAttributes({{ face_attributes }})
{% elif tinted_face_attributes != None %}
        declareTintedFaceAttributes({{ tinted_face_attributes }})
{% endif %}
    );
}

void {{ name_lower }}BlockAccess(VSelf) ALIAS("{{ name_capital }}Block_access");
void {{ name_capital }}Block_access(VSelf) {
}

IItem* {{ name_lower }}BlockDestroy(VSelf, bool drop_item) ALIAS("{{ name_capital }}Block_destroy");
IItem* {{ name_capital }}Block_destroy(VSelf, bool drop_item) {
    VSELF({{ name_capital }}Block);
    return drop_item ? {{ name_lower }}BlockProvideItem(self) : NULL;
}

void {{ name_lower }}BlockUpdate(VSelf) ALIAS("{{ name_capital }}Block_update");
void {{ name_capital }}Block_update(VSelf) {
}

IItem* {{ name_lower }}BlockProvideItem(VSelf) ALIAS("{{ name_capital }}Block_provideItem");
IItem* {{ name_capital }}Block_provideItem(VSelf) {
    VSELF({{ name_capital }}Block);
    IItem* item = itemCreate();
    {{ name_capital }}ItemBlock* item_block = {{ name_lower }}ItemBlockCreate();
    DYN_PTR(item, {{ name_capital }}ItemBlock, IItem, item_block);
    VCALL(*item, init);
    itemBlockReplicateFaceAttributes(item_block->item_block, self->block);
    item_block->item_item.stack_size = 1;
    item_block->item_item.bob_direction = 1;
    return item;
}

{% if has_use_action %}
bool {{ name_lower }}BlockUseAction(VSelf) ALIAS("{{ name_capital }}Block_useAction");
bool {{ name_capital }}Block_useAction(VSelf) {
    TODO("Implement use action for {{ name_lower }} block");
}
{% endif %}

{% if opaque_bitset != None %}
static const u8 {{ name_snake_upper }}_OPAQUE_BITSET = opaqueFacesBitset({{ opaque_bitset }});

bool {{ name_lower }}BlockIsOpaque(VSelf, FaceDirection face_dir) ALIAS("{{ name_capital }}Block_isOpaque");
bool {{ name_capital }}Block_isOpaque(VSelf, const FaceDirection face_dir) {
    return ({{ name_snake_upper }}_OPAQUE_BITSET >> face_dir) & 0x1;
}

u8 {{ name_lower }}BlockOpaqueBitset(VSelf) ALIAS("{{ name_capital }}Block_opaqueBitset");
u8 {{ name_capital }}Block_opaqueBitset(VSelf) {
    return {{ name_snake_upper }}_OPAQUE_BITSET;
}
{% endif %}
