#include "block_{{ name_snake_lower }}.h"

#include "../../util/interface99_extensions.h"
#include "block_id.h"
#include "../items/blocks/item_block_{{ name_snake_lower }}.h"

{% if stateful -%}
DEFN_BLOCK_CONSTRUCTOR_IMPL_STATEFUL({{ name_lower }}) {
    TODO("Constructor for {{ name_lower }} block");
}
{%- else -%}
DEFN_BLOCK_CONSTRUCTOR_IMPL_STATELESS({{ name_lower }}, {{ name_snake_upper }})
{%- endif %}

void {{ name_lower }}BlockInit(VSelf) ALIAS("{{ name_capital }}Block_init");
void {{ name_capital }}Block_init(VSelf) {
    VSELF({{ name_capital }}Block);
    self->block = declareBlock(
        BLOCKID_{{ name_snake_upper }},
        0,
        {% if light_level != None -%}
        {{ light_level }},
        {%- endif %}
        {% if opaque_bitset != None -%}
        opacityBitset({{ opaque_bitset }}),
        {%- else -%}
        opacityBitset(NO_TINT, NO_TINT, NO_TINT, NO_TINT, NO_TINT, NO_TINT)
        {%- endif %}
        {{ orientation }}
    );
}

IItem* {{ name_lower }}BlockDestroy(VSelf, bool drop_item) ALIAS("{{ name_capital }}Block_destroy");
IItem* {{ name_capital }}Block_destroy(VSelf, bool drop_item) {
    VSELF({{ name_capital }}Block);
    return drop_item ? {{ name_lower }}BlockProvideItem(self) : NULL;
}

IItem* {{ name_lower }}BlockProvideItem(VSelf) ALIAS("{{ name_capital }}Block_provideItem");
IItem* {{ name_capital }}Block_provideItem(VSelf) {
    VSELF({{ name_capital }}Block);
    IItem* item = itemConstructor({{ name_lower }})(0);
    {{ name_capital }}ItemBlock* item_block = VCAST_PTR{{ name_capital }}ItemBlock*, item);
    itemBlockReplicateFaceAttributes(item_block->item_block, self->block);
    item_block->item_block.item.stack_size = 1;
    item_block->item_block.item.bob_direction = 1;
    return item;
}
{%- if has_update %}

void {{ name_lower }}BlockUpdate(VSelf) ALIAS("{{ name_capital }}Block_update");
void {{ name_capital }}Block_update(VSelf) {
    UNIMPLEMENTED();
}
{% endif %}
{%- if has_use_action %}

bool {{ name_lower }}BlockUseAction(VSelf) ALIAS("{{ name_capital }}Block_useAction");
bool {{ name_capital }}Block_useAction(VSelf) {
    UNIMPLEMENTED();
    return false;
}
{% endif %}
{%- if has_can_place %}

bool {{ name_lower }}BlockCanPlace(VSelf, const World* world, const VECTOR* position, const AABB* player_aabb) ALIAS("{{ name_capital }}Block_canPlace");
bool {{ name_capital }}Block_canPlace(VSelf, const World* world, const VECTOR* position, const AABB* player_aabb){
    UNIMPLEMENTED();
}
{% endif %}
